generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model app_user {
  user_id               Int                     @id @default(autoincrement())
  username              String                  @db.VarChar(50)
  email                 String                  @unique @db.VarChar(255)
  password_hash         String
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  height                Int?
  gender                String                  @db.VarChar(1)
  description           String?
  calendar_event_parent calendar_event_parent[]
  refresh_token         refresh_token[]
  user_workout          user_workout[]
  workout_template      workout_template[]
}

model body_part {
  body_part_id        Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  exercise_body_parts exercise_body_parts[]
}

model calendar_event {
  event_id              Int                   @id @default(autoincrement())
  parent_id             Int
  datetime              DateTime
  calendar_event_parent calendar_event_parent @relation(fields: [parent_id], references: [parent_id], onDelete: NoAction, onUpdate: NoAction)
  user_workout_log      user_workout_log?
}

model calendar_event_parent {
  parent_id        Int              @id @default(autoincrement())
  user_id          Int
  workout_id       Int
  repeat_frequency Int
  repeat_unit      TimeUnit
  repeat_count     Int
  calendar_event   calendar_event[]
  app_user         app_user         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  workout_template workout_template @relation(fields: [workout_id], references: [workout_id], onDelete: NoAction, onUpdate: NoAction)
}

model exercise {
  exercise_id                Int                          @id @default(autoincrement())
  exercise_type_id           Int
  name                       String                       @db.VarChar(255)
  description                String?
  image_urls                 String[]
  exercise_type              exercise_type                @relation(fields: [exercise_type_id], references: [exercise_type_id], onDelete: NoAction, onUpdate: NoAction)
  exercise_body_parts        exercise_body_parts[]
  exercise_template_item     exercise_template_item[]
  user_exercise_history_item user_exercise_history_item[]
}

model exercise_body_parts {
  exercise_id  Int
  body_part_id Int
  body_part    body_part @relation(fields: [body_part_id], references: [body_part_id], onDelete: NoAction, onUpdate: NoAction)
  exercise     exercise  @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([exercise_id, body_part_id])
}

model exercise_template_item {
  item_id                    Int                          @id @default(autoincrement())
  workout_template_id        Int
  exercise_id                Int
  value                      Json
  order_index                Int
  exercise                   exercise                     @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)
  workout_template           workout_template             @relation(fields: [workout_template_id], references: [workout_id], onDelete: NoAction, onUpdate: NoAction)
  progress_config            progress_config[]
  user_exercise_history_item user_exercise_history_item[]
}

model exercise_type {
  exercise_type_id Int        @id @default(autoincrement())
  name             String     @db.VarChar(50)
  has_reps         Boolean?   @default(false)
  has_sets         Boolean?   @default(false)
  has_weights      Boolean?   @default(false)
  has_time         Boolean?   @default(false)
  is_break         Boolean?   @default(false)
  exercise         exercise[]
}

model measurement {
  measurement_id Int      @id @default(autoincrement())
  user_id        Int
  save_date      DateTime @default(now()) @db.Timestamptz(6)
  weight         Float
  biceps         Float
  chest          Float
  waist          Float
  hips           Float
  thigh          Float
  calf           Float
}

model refresh_token {
  refresh_token_id Int      @id @default(autoincrement())
  token            String
  user_id          Int
  app_user         app_user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model tag {
  tag_id       Int            @id @default(autoincrement())
  name         String?        @db.VarChar(64)
  workout_tags workout_tags[]
}

model user_exercise_history_item {
  item_id                   Int                     @id @default(autoincrement())
  user_log_id               Int
  exercise_id               Int
  opinion                   Int
  value                     Json
  order_index               Int
  timestamp                 DateTime?               @default(now()) @db.Timestamptz(6)
  exercise_template_item_id Int?
  exercise                  exercise                @relation(fields: [exercise_id], references: [exercise_id], onDelete: NoAction, onUpdate: NoAction)
  exercise_template_item    exercise_template_item? @relation(fields: [exercise_template_item_id], references: [item_id])
  user_workout_log          user_workout_log        @relation(fields: [user_log_id], references: [log_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_workout {
  user_workout_id  Int                @id @default(autoincrement())
  user_id          Int
  workout_id       Int
  timestamp        DateTime?          @default(now()) @db.Timestamptz(6)
  progress_config  progress_config[]
  app_user         app_user           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  workout_template workout_template   @relation(fields: [workout_id], references: [workout_id], onDelete: NoAction, onUpdate: NoAction)
  user_workout_log user_workout_log[]
}

model user_workout_log {
  log_id                     Int                          @id @default(autoincrement())
  user_workout_id            Int
  opinion                    Int
  log_date                   DateTime?                    @default(now()) @db.Timestamptz(6)
  event_id                   Int?                         @unique
  user_exercise_history_item user_exercise_history_item[]
  calendar_event             calendar_event?              @relation(fields: [event_id], references: [event_id])
  user_workout               user_workout                 @relation(fields: [user_workout_id], references: [user_workout_id], onDelete: NoAction, onUpdate: NoAction)
}

model workout_level {
  level_id         Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  workout_template workout_template[]
}

model workout_tags {
  workout_tag_id      Int              @id @default(autoincrement())
  tag_id              Int
  workout_template_id Int
  tag                 tag              @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)
  workout_template    workout_template @relation(fields: [workout_template_id], references: [workout_id], onDelete: NoAction, onUpdate: NoAction)
}

model workout_template {
  workout_id             Int                      @id @default(autoincrement())
  author_id              Int
  name                   String                   @db.VarChar(100)
  description            String
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  private                Boolean?                 @default(false)
  workout_level_id       Int
  source                 String?
  calendar_event_parent  calendar_event_parent[]
  exercise_template_item exercise_template_item[]
  user_workout           user_workout[]
  workout_tags           workout_tags[]
  app_user               app_user                 @relation(fields: [author_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  workout_level          workout_level            @relation(fields: [workout_level_id], references: [level_id])
}

model progress_config {
  config_id                 Int                    @id @default(autoincrement())
  user_workout_id           Int?
  exercise_template_item_id Int
  type                      ProgressType
  value                     Json
  timestamp                 DateTime?              @default(now()) @db.Timestamptz(6)
  exercise_template_item    exercise_template_item @relation(fields: [exercise_template_item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  user_workout              user_workout?          @relation(fields: [user_workout_id], references: [user_workout_id], onDelete: NoAction, onUpdate: NoAction)
}

enum TimeUnit {
  day
  week
  month
}

enum ProgressType {
  none
  linear
  sigmoidal
}
