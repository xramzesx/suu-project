generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  userId               Int                   @id @default(autoincrement()) @map("user_id")
  username             String                @db.VarChar(50)
  email                String                @unique @db.VarChar(255)
  passwordHash         String                @map("password_hash")
  createdAt            DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  height               Int?
  gender               String                @db.VarChar(1)
  description          String?               @db.Text
  userWorkouts         UserWorkout[]
  workoutTemplates     WorkoutTemplate[]
  refreshTokens        RefreshToken[]
  calendarEventParents CalendarEventParent[]

  @@map("app_user")
}

model RefreshToken {
  refreshTokenId Int     @id @default(autoincrement()) @map("refresh_token_id")
  token          String
  userId         Int     @map("user_id")
  appUser        AppUser @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@map("refresh_token")
}

model BodyPart {
  bodyPartId         Int                  @id @default(autoincrement()) @map("body_part_id")
  name               String               @db.VarChar(100)
  exercisesBodyParts ExercisesBodyParts[]

  @@map("body_part")
}

model Exercise {
  exerciseId               Int                       @id @default(autoincrement()) @map("exercise_id")
  exerciseTypeId           Int                       @map("exercise_type_id")
  name                     String                    @db.VarChar(255)
  description              String?
  imageUrls                String[]                  @map("image_urls")
  exerciseType             ExerciseType              @relation(fields: [exerciseTypeId], references: [exerciseTypeId], onDelete: NoAction, onUpdate: NoAction)
  exerciseTemplateItems    ExerciseTemplateItem[]
  exercisesBodyParts       ExercisesBodyParts[]
  userExerciseHistoryItems UserExerciseHistoryItem[]

  @@map("exercise")
}

model ExerciseTemplateItem {
  itemId            Int             @id @default(autoincrement()) @map("item_id")
  workoutTemplateId Int             @map("workout_template_id")
  exerciseId        Int             @map("exercise_id")
  value             Json
  orderIndex        Int             @map("order_index")
  exercise          Exercise        @relation(fields: [exerciseId], references: [exerciseId], onDelete: NoAction, onUpdate: NoAction)
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [workoutId], onDelete: NoAction, onUpdate: NoAction)

  userExerciseHistoryItems UserExerciseHistoryItem[]
  progressConfigs          ProgressConfig[]

  @@map("exercise_template_item")
}

model ProgressConfig {
  configId               Int          @id @default(autoincrement()) @map("config_id")
  userWorkoutId          Int?         @map("user_workout_id")
  exerciseTemplateItemId Int          @map("exercise_template_item_id")
  type                   ProgressType
  value                  Json
  timestamp              DateTime?    @default(now()) @db.Timestamptz(6)

  exerciseTemplateItem ExerciseTemplateItem @relation(fields: [exerciseTemplateItemId], references: [itemId], onDelete: NoAction, onUpdate: NoAction)
  userWorkout          UserWorkout?         @relation(fields: [userWorkoutId], references: [userWorkoutId], onDelete: NoAction, onUpdate: NoAction)

  @@map("progress_config")
}

enum ProgressType {
  none
  linear
  sigmoidal
}

model ExerciseType {
  exerciseTypeId Int      @id @default(autoincrement()) @map("exercise_type_id")
  name           String   @db.VarChar(50)
  hasReps        Boolean? @default(false) @map("has_reps")
  hasSets        Boolean? @default(false) @map("has_sets")
  hasWeights     Boolean? @default(false) @map("has_weights")
  hasTime        Boolean? @default(false) @map("has_time")
  isBreak        Boolean? @default(false) @map("is_break")

  exercises Exercise[]

  @@map("exercise_type")
}

model ExercisesBodyParts {
  exerciseId Int      @map("exercise_id")
  bodyPartId Int      @map("body_part_id")
  bodyPart   BodyPart @relation(fields: [bodyPartId], references: [bodyPartId], onDelete: NoAction, onUpdate: NoAction)
  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: NoAction, onUpdate: NoAction)

  @@id([exerciseId, bodyPartId])
  @@map("exercise_body_parts")
}

model Tag {
  tagId       Int           @id @default(autoincrement()) @map("tag_id")
  name        String?       @db.VarChar(64)
  workoutTags WorkoutTags[]

  @@map("tag")
}

model UserExerciseHistoryItem {
  itemId                 Int       @id @default(autoincrement()) @map("item_id")
  userLogId              Int       @map("user_log_id")
  exerciseId             Int       @map("exercise_id")
  opinion                Int
  value                  Json
  orderIndex             Int       @map("order_index")
  timestamp              DateTime? @default(now()) @db.Timestamptz(6)
  exerciseTemplateItemId Int?      @map("exercise_template_item_id")

  exercise             Exercise              @relation(fields: [exerciseId], references: [exerciseId], onDelete: NoAction, onUpdate: NoAction)
  userWorkoutLog       UserWorkoutLog        @relation(fields: [userLogId], references: [logId], onDelete: NoAction, onUpdate: NoAction)
  exerciseTemplateItem ExerciseTemplateItem? @relation(fields: [exerciseTemplateItemId], references: [itemId])

  @@map("user_exercise_history_item")
}

model UserWorkout {
  userWorkoutId   Int              @id @default(autoincrement()) @map("user_workout_id")
  userId          Int              @map("user_id")
  workoutId       Int              @map("workout_id")
  timestamp       DateTime?        @default(now()) @db.Timestamptz(6)
  appUser         AppUser          @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  workoutTemplate WorkoutTemplate  @relation(fields: [workoutId], references: [workoutId], onDelete: NoAction, onUpdate: NoAction)
  userWorkoutLogs UserWorkoutLog[]
  progressConfigs ProgressConfig[]

  @@map("user_workout")
}

model CalendarEventParent {
  parentId        Int      @id @default(autoincrement()) @map("parent_id")
  userId          Int      @map("user_id")
  workoutId       Int      @map("workout_id")
  repeatFrequency Int      @map("repeat_frequency")
  repeatUnit      TimeUnit @map("repeat_unit")
  repeatCount     Int      @map("repeat_count")

  calendarEvents  CalendarEvent[]
  appUser         AppUser         @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  workoutTemplate WorkoutTemplate @relation(fields: [workoutId], references: [workoutId], onDelete: NoAction, onUpdate: NoAction)

  @@map("calendar_event_parent")
}

model CalendarEvent {
  eventId             Int                 @id @default(autoincrement()) @map("event_id")
  parentId            Int                 @map("parent_id")
  datetime            DateTime
  userWorkoutLog      UserWorkoutLog?
  calendarEventParent CalendarEventParent @relation(fields: [parentId], references: [parentId], onDelete: NoAction, onUpdate: NoAction)

  @@map("calendar_event")
}

model UserWorkoutLog {
  logId                    Int                       @id @default(autoincrement()) @map("log_id")
  userWorkoutId            Int                       @map("user_workout_id")
  opinion                  Int
  logDate                  DateTime?                 @default(now()) @map("log_date") @db.Timestamptz(6)
  userExerciseHistoryItems UserExerciseHistoryItem[]
  eventId                  Int?                      @unique @map("event_id")

  userWorkout   UserWorkout    @relation(fields: [userWorkoutId], references: [userWorkoutId], onDelete: NoAction, onUpdate: NoAction)
  calendarEvent CalendarEvent? @relation(fields: [eventId], references: [eventId])

  @@map("user_workout_log")
}

model WorkoutTags {
  workoutTagId      Int             @id @default(autoincrement()) @map("workout_tag_id")
  tagId             Int             @map("tag_id")
  workoutTemplateId Int             @map("workout_template_id")
  tag               Tag             @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction)
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [workoutId], onDelete: NoAction, onUpdate: NoAction)

  @@map("workout_tags")
}

model WorkoutLevel {
  levelId          Int               @id @default(autoincrement()) @map("level_id")
  name             String            @db.VarChar(50)
  workoutTemplates WorkoutTemplate[]

  @@map("workout_level")
}

model WorkoutTemplate {
  workoutId             Int                    @id @default(autoincrement()) @map("workout_id")
  authorId              Int                    @map("author_id")
  name                  String                 @db.VarChar(100)
  description           String
  createdAt             DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  private               Boolean?               @default(false)
  workoutLevelId        Int                    @map("workout_level_id")
  exerciseTemplateItems ExerciseTemplateItem[]
  userWorkouts          UserWorkout[]
  workoutTags           WorkoutTags[]
  appUser               AppUser                @relation(fields: [authorId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  workoutLevel          WorkoutLevel           @relation(fields: [workoutLevelId], references: [levelId])
  calendarEventParents  CalendarEventParent[]
  source                String?

  @@map("workout_template")
}

model Measurement {
  measurementId Int      @id @default(autoincrement()) @map("measurement_id")
  userId        Int      @map("user_id")
  saveDate      DateTime @default(now()) @map("save_date") @db.Timestamptz(6)
  weight        Float
  biceps        Float
  chest         Float
  waist         Float
  hips          Float
  thigh         Float
  calf          Float

  @@map("measurement")
}

enum TimeUnit {
  day
  week
  month
}
